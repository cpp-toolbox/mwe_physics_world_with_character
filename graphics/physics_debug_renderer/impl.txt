in order to implement the jolt physics debug renderer you have to know about the following ideas:

- the idea of a render primitive in whatever rendering language you choose, in opengl this is vertex, index, array buffers

- The definition of Batch is a Ref<RefTargetVirtual> which is [TODO, I don't actually know what that is], but it seems to
contain no information, therefore in order to create a triangle batch you'll have to make a class which subclasses from Batch or
Ref<RefTargetVirtual> which will allow you to store relevant drawing information.

- The purpose of CreateTriangleBatch in the larger scheme of things is that individual objects/shapes in the simulation will be able to create
a batch of triangles that represent that given shape, that is then used to construct Geometry which is stored in that object, when you do this it automatically
stores the triangle batch in a different LOD setting so that you can use that information (if you want to) in your setup.

- Every Shape has a draw method, which in-turn call DrawGeometry, which pass in relevant information about any scalings and positional information about
the shape along with it's geometry (which in-turn contains a triangle batch inside of it's LOD).

- In general the BodyManager has a method called Draw as well which iterates through every body and calls Draw on the individual body. The entire physics system itself has
a function called DrawBodies which simply calls body_manager.draw() which sets everything off. You have to call this manually if you want drawing to occur.